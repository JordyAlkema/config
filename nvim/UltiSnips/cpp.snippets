snippet for "C++ for loop"
for (int ${1:i} = 0; $1 < ${2:count}; $1++) {
	$0
}
endsnippet
snippet while "while" b
while (${1:true}) {
	${0:${VISUAL}}
}
endsnippet
snippet inc "Include project headers" b
#include "${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}.h"
endsnippet
snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
	$1();
	virtual ~$1();
$0
private:
};

#endif /* $2 */
endsnippet
snippet cout "cout and endl" b
std::cout << ${1: ${VISUAL}} << std::endl;
endsnippet
snippet cerr "cerr and endl" b
std::cerr << ${1: ${VISUAL}} << std::endl;
endsnippet
snippet endl "<< std::endl;"
<< std::endl;
endsnippet
snippet arr "std::array<,>"
std::array<${1: },${2: }>$0
endsnippet
snippet str "string" i
std::string
endsnippet
snippet s "std::" i
std::
endsnippet
snippet ter "ternary"
${1:/* condition */} ? ${2:a} : ${3:b};
endsnippet
snippet fileExists "C++ check if file exists"
bool fileExists(std::string filename)
{
	std::ifstream inFile(filename);
	return inFile.good();
}
endsnippet
snippet tolower "description" w
for (int i = 0; i < (int) ${1:string}.length(); i++) {
	$1[i] = std::tolower($1[i]);
}
endsnippet
snippet cin "description" w
std::cin >> ${1: };
endsnippet
